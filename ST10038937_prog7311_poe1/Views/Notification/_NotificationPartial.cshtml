@model IEnumerable<ST10038937_prog7311_poe1.Models.Notification>
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> Localizer

<div class="dropdown-menu dropdown-menu-end notification-dropdown" style="width: 350px; max-height: 400px; overflow-y: auto;">
    <div class="d-flex justify-content-between align-items-center p-3 border-bottom">
        <h6 class="mb-0">@Localizer["Notifications"]</h6>
        <div class="d-flex gap-1">
            <button class="btn btn-sm btn-outline-primary mark-all-read-btn" @(ViewBag.UnreadCount == 0 ? "disabled" : "")>
                <i class="bi bi-check-all"></i>
            </button>
            <a href="@Url.Action("Index", "Notification")" class="btn btn-sm btn-outline-secondary">
                <i class="bi bi-arrow-right"></i>
            </a>
        </div>
    </div>
    
    @if (!Model.Any())
    {
        <div class="text-center py-4">
            <i class="bi bi-bell-slash text-muted mb-2"></i>
            <p class="text-muted small mb-0">@Localizer["NoNotifications"]</p>
        </div>
    }
    else
    {
        <div class="notification-list">
            @foreach (var notification in Model.Take(5))
            {
                <div class="dropdown-item notification-item @(!notification.IsRead ? "bg-light" : "")" 
                     data-notification-id="@notification.Id" 
                     data-notification-read="@notification.IsRead.ToString().ToLower()">
                    <div class="d-flex align-items-start">
                        <div class="flex-shrink-0 me-2">
                            @Html.Raw(GetNotificationIcon(notification.Type))
                        </div>
                        <div class="flex-grow-1 min-w-0">
                            <div class="d-flex align-items-center mb-1">
                                <h6 class="mb-0 small @(!notification.IsRead ? "fw-bold" : "") text-truncate">
                                    @notification.Title
                                </h6>
                                @if (notification.Priority == NotificationPriority.Critical)
                                {
                                    <span class="badge bg-danger ms-1">@Localizer["Critical"]</span>
                                }
                                else if (notification.Priority == NotificationPriority.High)
                                {
                                    <span class="badge bg-warning ms-1">@Localizer["High"]</span>
                                }
                            </div>
                            <p class="mb-1 small text-muted text-truncate">@notification.Message</p>
                            <small class="text-muted">
                                <i class="bi bi-clock me-1"></i>@GetTimeAgo(notification.CreatedAt)
                            </small>
                        </div>
                        <div class="flex-shrink-0 ms-2">
                            <div class="dropdown">
                                <button class="btn btn-sm btn-link text-muted p-0" type="button" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    @if (!notification.IsRead)
                                    {
                                        <li><a class="dropdown-item mark-read-btn" href="#" data-notification-id="@notification.Id">
                                            <i class="bi bi-check me-2"></i>@Localizer["MarkAsRead"]
                                        </a></li>
                                    }
                                    <li><a class="dropdown-item delete-notification-btn" href="#" data-notification-id="@notification.Id">
                                        <i class="bi bi-trash me-2"></i>@Localizer["Delete"]
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        @if (Model.Count() > 5)
        {
            <div class="border-top p-2 text-center">
                <a href="@Url.Action("Index", "Notification")" class="btn btn-sm btn-outline-primary">
                    @Localizer["ViewAllNotifications"]
                </a>
            </div>
        }
    }
</div>

@functions {
    private string GetNotificationIcon(NotificationType type)
    {
        return type switch
        {
            NotificationType.ProductUpdate => "<i class=\"bi bi-box-seam text-primary\"></i>",
            NotificationType.ForumPost => "<i class=\"bi bi-chat-dots text-success\"></i>",
            NotificationType.ForumReply => "<i class=\"bi bi-reply text-info\"></i>",
            NotificationType.SystemAlert => "<i class=\"bi bi-exclamation-triangle text-warning\"></i>",
            NotificationType.Welcome => "<i class=\"bi bi-emoji-smile text-success\"></i>",
            NotificationType.SecurityAlert => "<i class=\"bi bi-shield-exclamation text-danger\"></i>",
            NotificationType.AuditLog => "<i class=\"bi bi-journal-text text-secondary\"></i>",
            _ => "<i class=\"bi bi-bell text-primary\"></i>"
        };
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalDays >= 1)
        {
            return $"{(int)timeSpan.TotalDays}d ago";
        }
        else if (timeSpan.TotalHours >= 1)
        {
            return $"{(int)timeSpan.TotalHours}h ago";
        }
        else if (timeSpan.TotalMinutes >= 1)
        {
            return $"{(int)timeSpan.TotalMinutes}m ago";
        }
        else
        {
            return "Just now";
        }
    }
} 