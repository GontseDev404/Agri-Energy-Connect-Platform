@model IEnumerable<ST10038937_prog7311_poe1.Models.Notification>
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> Localizer

@{
    ViewData["Title"] = "Notifications";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">
                    <i class="bi bi-bell me-2"></i>@Localizer["Notifications"]
                </h1>
                <div class="d-flex gap-2">
                    <button id="markAllReadBtn" class="btn btn-outline-primary btn-sm" @(ViewBag.UnreadCount == 0 ? "disabled" : "")>
                        <i class="bi bi-check-all me-1"></i>@Localizer["MarkAllAsRead"]
                    </button>
                    <button id="refreshBtn" class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-arrow-clockwise me-1"></i>@Localizer["Refresh"]
                    </button>
                </div>
            </div>

            @if (!Model.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-bell-slash fs-1 text-muted mb-3"></i>
                    <h3 class="text-muted">@Localizer["NoNotifications"]</h3>
                    <p class="text-muted">@Localizer["NoNotificationsDescription"]</p>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-12">
                        <div class="card shadow-sm">
                            <div class="card-body p-0">
                                <div class="list-group list-group-flush" id="notificationsList">
                                    @foreach (var notification in Model)
                                    {
                                        <div class="list-group-item list-group-item-action @(!notification.IsRead ? "list-group-item-primary" : "") notification-item" 
                                             data-notification-id="@notification.Id" 
                                             data-notification-read="@notification.IsRead.ToString().ToLower()">
                                            <div class="d-flex w-100 justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <div class="d-flex align-items-center mb-1">
                                                        <h6 class="mb-0 @(!notification.IsRead ? "fw-bold" : "")">
                                                            @GetNotificationIcon(notification.Type) @notification.Title
                                                        </h6>
                                                        @if (notification.Priority == NotificationPriority.Critical)
                                                        {
                                                            <span class="badge bg-danger ms-2">@Localizer["Critical"]</span>
                                                        }
                                                        else if (notification.Priority == NotificationPriority.High)
                                                        {
                                                            <span class="badge bg-warning ms-2">@Localizer["High"]</span>
                                                        }
                                                        @if (!notification.IsRead)
                                                        {
                                                            <span class="badge bg-primary ms-2">@Localizer["New"]</span>
                                                        }
                                                    </div>
                                                    <p class="mb-1 text-muted">@notification.Message</p>
                                                    <small class="text-muted">
                                                        <i class="bi bi-clock me-1"></i>@notification.CreatedAt.ToString("g")
                                                    </small>
                                                </div>
                                                <div class="dropdown ms-2">
                                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                        <i class="bi bi-three-dots"></i>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        @if (!notification.IsRead)
                                                        {
                                                            <li><a class="dropdown-item mark-read-btn" href="#" data-notification-id="@notification.Id">
                                                                <i class="bi bi-check me-2"></i>@Localizer["MarkAsRead"]
                                                            </a></li>
                                                        }
                                                        <li><a class="dropdown-item delete-notification-btn" href="#" data-notification-id="@notification.Id">
                                                            <i class="bi bi-trash me-2"></i>@Localizer["Delete"]
                                                        </a></li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        @if (ViewBag.TotalPages > 1)
                        {
                            <nav aria-label="Notification pagination" class="mt-4">
                                <ul class="pagination justify-content-center">
                                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                                    {
                                        <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                            <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Mark as read functionality
            $('.mark-read-btn').on('click', function(e) {
                e.preventDefault();
                var notificationId = $(this).data('notification-id');
                var item = $(this).closest('.notification-item');
                
                $.post('@Url.Action("MarkAsRead")', { id: notificationId })
                    .done(function(response) {
                        if (response.success) {
                            item.removeClass('list-group-item-primary');
                            item.find('.fw-bold').removeClass('fw-bold');
                            item.find('.badge.bg-primary').remove();
                            item.attr('data-notification-read', 'true');
                            updateNotificationCount(response.unreadCount);
                        }
                    })
                    .fail(function() {
                        showAlert('@Localizer["ErrorMarkingAsRead"]', 'danger');
                    });
            });

            // Delete notification functionality
            $('.delete-notification-btn').on('click', function(e) {
                e.preventDefault();
                var notificationId = $(this).data('notification-id');
                var item = $(this).closest('.notification-item');
                
                if (confirm('@Localizer["ConfirmDeleteNotification"]')) {
                    $.post('@Url.Action("Delete")', { id: notificationId })
                        .done(function(response) {
                            if (response.success) {
                                item.fadeOut(function() {
                                    $(this).remove();
                                    if ($('.notification-item').length === 0) {
                                        location.reload();
                                    }
                                });
                                updateNotificationCount(response.unreadCount);
                            }
                        })
                        .fail(function() {
                            showAlert('@Localizer["ErrorDeletingNotification"]', 'danger');
                        });
                }
            });

            // Mark all as read functionality
            $('#markAllReadBtn').on('click', function() {
                $.post('@Url.Action("MarkAllAsRead")')
                    .done(function(response) {
                        if (response.success) {
                            $('.notification-item').removeClass('list-group-item-primary');
                            $('.notification-item .fw-bold').removeClass('fw-bold');
                            $('.notification-item .badge.bg-primary').remove();
                            $('.notification-item').attr('data-notification-read', 'true');
                            $('#markAllReadBtn').prop('disabled', true);
                            updateNotificationCount(0);
                        }
                    })
                    .fail(function() {
                        showAlert('@Localizer["ErrorMarkingAllAsRead"]', 'danger');
                    });
            });

            // Refresh functionality
            $('#refreshBtn').on('click', function() {
                location.reload();
            });

            function updateNotificationCount(count) {
                // Update any notification badges in the layout
                $('.notification-badge').text(count);
                if (count === 0) {
                    $('.notification-badge').hide();
                } else {
                    $('.notification-badge').show();
                }
            }

            function showAlert(message, type) {
                var alertHtml = '<div class="alert alert-' + type + ' alert-dismissible fade show" role="alert">' +
                    message +
                    '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                    '</div>';
                $('.container-fluid').prepend(alertHtml);
            }
        });
    </script>
}

@functions {
    private string GetNotificationIcon(NotificationType type)
    {
        return type switch
        {
            NotificationType.ProductUpdate => "<i class=\"bi bi-box-seam text-primary\"></i>",
            NotificationType.ForumPost => "<i class=\"bi bi-chat-dots text-success\"></i>",
            NotificationType.ForumReply => "<i class=\"bi bi-reply text-info\"></i>",
            NotificationType.SystemAlert => "<i class=\"bi bi-exclamation-triangle text-warning\"></i>",
            NotificationType.Welcome => "<i class=\"bi bi-emoji-smile text-success\"></i>",
            NotificationType.SecurityAlert => "<i class=\"bi bi-shield-exclamation text-danger\"></i>",
            NotificationType.AuditLog => "<i class=\"bi bi-journal-text text-secondary\"></i>",
            _ => "<i class=\"bi bi-bell text-primary\"></i>"
        };
    }
} 